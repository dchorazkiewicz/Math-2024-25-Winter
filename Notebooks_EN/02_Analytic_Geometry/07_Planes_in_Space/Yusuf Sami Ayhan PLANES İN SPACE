#ex1
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define points A, B, and C
A = np.array([1, 2, 3])
B = np.array([3, 4, 5])
C = np.array([2, 1, 4])

# Vectors AB and AC
AB = B - A
AC = C - A

# Normal vector (cross product of AB and AC)
normal = np.cross(AB, AC)

# Create a grid for plotting the plane
x = np.linspace(-5, 5, 10)
y = np.linspace(-5, 5, 10)
X, Y = np.meshgrid(x, y)

# Plane equation: normal[0]*(x - A[0]) + normal[1]*(y - A[1]) + normal[2]*(z - A[2]) = 0
Z = (-normal[0] * (X - A[0]) - normal[1] * (Y - A[1])) / normal[2] + A[2]

# Plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the plane
ax.plot_surface(X, Y, Z, alpha=0.5, color='cyan')

# Plot points A, B, C
ax.scatter(A[0], A[1], A[2], color='r', s=100)
ax.scatter(B[0], B[1], B[2], color='g', s=100)
ax.scatter(C[0], C[1], C[2], color='b', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()


#ex2
# Normal vector of the given plane
normal_plane = np.array([2, 3, 4])

# Create a grid for plotting the parallel plane
Z_parallel = (-normal_plane[0] * (X - A[0]) - normal_plane[1] * (Y - A[1])) / normal_plane[2] + A[2]

# Plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the parallel plane
ax.plot_surface(X, Y, Z_parallel, alpha=0.5, color='orange')

# Plot point A
ax.scatter(A[0], A[1], A[2], color='r', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()


#ex3
# Plane equation using the normal vector
Z_perpendicular = (-normal_plane[0] * (X - A[0]) - normal_plane[1] * (Y - A[1])) / normal_plane[2] + A[2]

# Plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the perpendicular plane
ax.plot_surface(X, Y, Z_perpendicular, alpha=0.5, color='magenta')

# Plot point A
ax.scatter(A[0], A[1], A[2], color='r', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()


#ex4
from sympy import symbols, Eq, solve

# Define symbols
x, y, z = symbols('x y z')

# Plane equations
plane1 = Eq(2*x + 3*y + 4*z, 5)
plane2 = Eq(3*x + 4*y + 2*z, 6)

# Solve the system of equations to find the line
sol = solve((plane1, plane2), (x, y, z))
print("Intersection Line: ", sol)

#ex5
# Vectors v1 and v2
v1 = np.array([1, 0, 1])
v2 = np.array([0, 1, -1])

# Normal vector to the plane is the cross product of v1 and v2
normal_vector = np.cross(v1, v2)

# Plane equation using the normal vector
Z_parallel = (-normal_vector[0] * (X - A[0]) - normal_vector[1] * (Y - A[1])) / normal_vector[2] + A[2]

# Plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the plane
ax.plot_surface(X, Y, Z_parallel, alpha=0.5, color='yellow')

# Plot point A
ax.scatter(A[0], A[1], A[2], color='r', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()

#ex6
# For parallel plane (same normal vector)
Z_parallel = (-normal_plane[0] * (X - A[0]) - normal_plane[1] * (Y - A[1])) / normal_plane[2] + A[2]

# Perpendicular vector example: using a random perpendicular vector
normal_perpendicular = np.array([1, -1, 0])  # Example perpendicular vector
Z_perpendicular = (-normal_perpendicular[0] * (X - A[0]) - normal_perpendicular[1] * (Y - A[1])) / normal_perpendicular[2] + A[2]

# Plotting both planes
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the planes
ax.plot_surface(X, Y, Z_parallel, alpha=0.5, color='cyan')
ax.plot_surface(X, Y, Z_perpendicular, alpha=0.5, color='magenta')

# Plot point A
ax.scatter(A[0], A[1], A[2], color='r', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()

#ex7
# Point A
point = np.array([1, 2, 3])

# Plane normal vector and D
normal = np.array([2, 3, 4])
D = 5

# Distance formula
distance = abs(np.dot(normal, point) + D) / np.linalg.norm(normal)
print(f"Distance from point to plane: {distance}")


#ex8
# Points A(2,0,0), B(0,3,0), C(0,0,4)
A = np.array([2, 0, 0])
B = np.array([0, 3, 0])
C = np.array([0, 0, 4])

# Equation of plane
# x/Ax + y/By + z/Cz = 1
A_x, B_y, C_z = A[0], B[1], C[2]
# Equation of the plane is: x/2 + y/3 + z/4 = 1

# Create a meshgrid and plot the plane
X, Y = np.meshgrid(np.linspace(-5, 5, 10), np.linspace(-5, 5, 10))
Z = 1 - (X/A_x) - (Y/B_y)
Z = np.maximum(Z, 0)

# Plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, alpha=0.5, color='purple')

# Plot points A, B, C
ax.scatter(A[0], A[1], A[2], color='r', s=100)
ax.scatter(B[0], B[1], B[2], color='g', s=100)
ax.scatter(C[0], C[1], C[2], color='b', s=100)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()

#ex9
# Normal vectors of the planes
normal1 = np.array([1, 1, 1])  # Normal of x + y + z = 1
normal2 = np.array([1, 0, 0])  # Normal of x = 0

# Cosine of the angle
cos_angle = np.dot(normal1, normal2) / (np.linalg.norm(normal1) * np.linalg.norm(normal2))
theta = np.arccos(cos_angle)
angle_deg = np.degrees(theta)
print(f"Angle between the planes: {angle_deg} degrees")


#ex10
# Normal vector
normal = np.array([1, 1, 1])

# Plotting the plane and the perpendicular vector
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Create a grid for plotting the plane
X, Y = np.meshgrid(np.linspace(-5, 5, 10), np.linspace(-5, 5, 10))
Z = 1 - X - Y  # Plane equation: x + y + z = 1 -> z = 1 - x - y

# Plot the plane
ax.plot_surface(X, Y, Z, alpha=0.5, color='orange')

# Plot the normal vector
ax.quiver(0, 0, 0, normal[0], normal[1], normal[2], color='r', length=3)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()



